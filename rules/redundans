#####   REDUNDANS   #####

configfile: "config.yaml"

# rule all:
#     input:
#         expand("data/assemblies/redundans/{sample}/spades/scaffolds.filled.fa", sample=config["sample"]),
#         expand("data/assemblies/redundans/{sample}/platanus/scaffolds.filled.fa", sample=config["sample"])

rule redundans_spades:
    conda:
        "../envs/redundans.yaml"
    input:
        contigs=expand("data/assemblies/spades/{sample}/scaffolds.fasta", sample=config["sample"]),
        lib1=expand("data/trimmed/{sample}.{large}.trimmed_{FR}P.fq.gz", sample=config["sample"], large=config["large"], FR=config["FR"]),
        lib2=expand("data/trimmed/{sample}.{small}.trimmed_{FR}P.fq.gz", sample=config["sample"], small=config["small"], FR=config["FR"])
    output:
        "data/assemblies/redundans/spades/{sample}/scaffolds.filled.fa"
    params:
        out="data/assemblies/redundans/spades/{sample}/"
    threads:
        28
    shell:
        "rm -rf {params.out} && \
        ./redundans/redundans.py \
        -v \
        -f {input.contigs} \
        -i {input.lib1} {input.lib2}\
        -o {params.out} \
        -t {threads} \
        -m 500"


rule redundans_platanus:
    conda:
        "../envs/redundans.yaml"
    input:
        contigs="data/assemblies/platanus/assemble/{sample}_contig.fa",
        lib1=expand("data/trimmed/{sample}.{large}.trimmed_{FR}P.fq.gz", sample=config["sample"], large=config["large"], FR=config["FR"]),
        lib2=expand("data/trimmed/{sample}.{small}.trimmed_{FR}P.fq.gz", sample=config["sample"], small=config["small"], FR=config["FR"])
    output:
        "data/assemblies/redundans/platanus/{sample}/scaffolds.filled.fa"
    params:
        out="data/assemblies/redundans/platanus/{sample}/"
    threads:
        28
    shell:
        "rm -rf {params.out} && \
        ./redundans/redundans.py \
        -v \
        -f {input.contigs} \
        -i {input.lib1} {input.lib2}\
        -o {params.out} \
        -t {threads} \
        -m 500"
