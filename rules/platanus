#####   PLATANUS   #####

configfile: "config.yaml"

# rule all:
#     input:
#         expand("data/assemblies/platanus/assemble/{sample}{plat_out}", sample=config["sample"], plat_out=config["plat_out"]),
#         expand("data/assemblies/platanus/scaffold/{sample}{platscaff_out}", sample=config["sample"], platscaff_out=config["platscaff_out"]),
#         expand("data/assemblies/platanus/gapclosed/{sample}_gapClosed.fa", sample=config["sample"])

rule platanus_assemble:
    input:
        lib1=expand("data/trimmed/{sample}.{large}.trimmed_{FR}P.fastq", sample=config["sample"], large=config["large"], FR=config["FR"]),
        lib2=expand("data/trimmed/{sample}.{small}.trimmed_{FR}P.fastq", sample=config["sample"], small=config["small"], FR=config["FR"])
    output:
        expand("data/assemblies/platanus/assemble/{sample}{plat_out}", sample=config["sample"], plat_out=config["plat_out"])
    params:
        out=expand("data/assemblies/platanus/assemble/{sample}", sample=config["sample"])
    threads:
        28
    shell:
        "rm -rf tmp/ && \
        mkdir tmp/ && \
        ../../platanus assemble \
        -o {params.out} \
        -f {input.lib1} {input.lib2}\
        -t {threads} \
        -m 400 \
        -tmp tmp/ && \
        rm -rf tmp/"



rule platanus_scaffold:
    input:
        lib1=expand("data/trimmed/{sample}.{large}.trimmed_{FR}P.fastq", sample=config["sample"], large=config["large"], FR=config["FR"]),
        lib2=expand("data/trimmed/{sample}.{small}.trimmed_{FR}P.fastq", sample=config["sample"], small=config["small"], FR=config["FR"]),
        bubble="data/assemblies/platanus/assemble/{sample}_contigBubble.fa",
        contigs="data/assemblies/platanus/assemble/{sample}_contig.fa"
    output:
        "data/assemblies/platanus/scaffold/{sample}_scaffold.fa"
    threads:
        28
    params:
        pfx="data/assemblies/platanus/scaffold/{sample}"
    shell:
        "../../platanus scaffold \
        -t {threads} \
        -b {input.bubble} \
        -c {input.contigs} \
        -o {params.pfx} \
        -IP1  {input.lib1} \
        -IP2  {input.lib2} \
        -m 400"


rule platanus_gapclose:
    input:
        scaffolds="data/assemblies/platanus/scaffold/{sample}_scaffold.fa",
        lib1=expand("data/trimmed/{sample}.0014.trimmed_{FR}P.fastq", sample=config["sample"], FR=config["FR"]),
        lib2=expand("data/trimmed/{sample}.0058.trimmed_{FR}P.fastq", sample=config["sample"], FR=config["FR"])
    output:
        "data/assemblies/platanus/gapclosed/{sample}_gapClosed.fa"
    params:
        pfx="data/assemblies/platanus/gapclosed/{sample}"
    threads:
        28
    shell:
        "../../platanus gap_close \
        -t {threads} \
        -o {params.pfx} \
        -c {input.scaffolds} \
        -IP1 {input.lib1} \
        -IP2 {input.lib2} \
        -m 400"
