#####BUSCO#####

configfile: "config.yaml"

# rule all:
#     input:
#         expand("reports/BUSCO/{sample}/run_redundans_platanus/short_summary_{sample}.txt", sample=config["sample"]),
#         expand("reports/BUSCO/{sample}/run_redundans_spades/short_summary_{sample}.txt", sample=config["sample"]),
#         expand("reports/BUSCO/{sample}/run_platanus_gapclosed/short_summary_{sample}.txt", sample=config["sample"])


rule BUSCOing_redundans_platanusgc:
    conda:
        "../envs/BUSCO.yaml"
    input:
        "data/assemblies/redundans/{sample}/platanusgc/scaffolds.filled.fa"
    output:
        "reports/BUSCO/{sample}/redundans_platanusgc/short_summary.specific.nematoda_odb10.redundans_platanusgc.txt"
    params:
        pfx="redundans_platanusgc",
        db="../BUSCO/nematoda_odb10",
        mode="genome",
        dest="reports/BUSCO/{sample}"
    shell:
        "busco \
        -i {input} \
        -o {params.pfx} \
        -l {params.db} \
        -m {params.mode} -f \
        -c 14 \
        && mv \
        {params.pfx}/ \
        {params.dest}"

rule BUSCOing_redundans_platanus:
    conda:
        "../envs/BUSCO.yaml"
    input:
        "data/assemblies/redundans/{sample}/platanus/scaffolds.filled.fa"
    output:
        "reports/BUSCO/{sample}/redundans_platanus/short_summary.specific.nematoda_odb10.redundans_platanus.txt"
    params:
        database = "../BUSCO/nematoda_odb10",
        pfx = "redundans_platanus",
        mode = "genome",
        dest = "reports/BUSCO/{sample}/"
    shell:
        "busco \
        -i {input} \
        -o {params.pfx} \
        -l {params.database} \
        -m {params.mode} -f \
        -c 14 \
        && mv \
        {params.pfx}/ \
        {params.dest}"

rule BUSCOing_spades:
    conda:
        "../envs/BUSCO.yaml"
    input:
        "data/assemblies/spades/{sample}/scaffolds.fasta"
    output:
        "reports/BUSCO/{sample}/spades/short_summary.specific.nematoda_odb10.spades.txt"
    params:
        pfx="spades",
        db="../BUSCO/nematoda_odb10",
        mode="genome",
        dest="reports/BUSCO/{sample}"
    shell:
        "busco \
        -i {input} \
        -o {params.pfx} \
        -l {params.db} \
        -m {params.mode} -f \
        -c 14 \
        && mv \
        {params.pfx}/ \
        {params.dest}"

rule BUSCOing_redundans_spades:
    conda:
        "../envs/BUSCO.yaml"
    input:
        "data/assemblies/redundans/{sample}/spades/scaffolds.filled.fa"
    output:
        "reports/BUSCO/{sample}/redundans_spades/short_summary.specific.nematoda_odb10.redundans_spades.txt"
    params:
        pfx="redundans_spades",
        db="../BUSCO/nematoda_odb10",
        mode="genome",
        dest="reports/BUSCO/{sample}"
    shell:
        "busco \
        -i {input} \
        -o {params.pfx} \
        -l {params.db} \
        -m {params.mode} -f \
        -c 14 \
        && mv \
        {params.pfx}/ \
        {params.dest}"

rule BUSCOing_platanus_gapclosed:
    conda:
        "../envs/BUSCO.yaml"
    input:
        "data/assemblies/platanus/gapclosed/{sample}_gapClosed.fa"
    output:
        "reports/BUSCO/{sample}/platanus_gapclosed/short_summary.specific.nematoda_odb10.platanus_gapclosed.txt"
    params:
        pfx="platanus_gapclosed",
        db="../BUSCO/nematoda_odb10",
        mode="genome",
        dest="reports/BUSCO/{sample}"
    shell:
        "busco \
        -i {input} \
        -o {params.pfx} \
        -l {params.db} \
        -m {params.mode} -f \
        -c 14 \
        && mv \
        {params.pfx}/ \
        {params.dest}"

rule BUSCOing_platanus_assemble:
    conda:
        "../envs/BUSCO.yaml"
    input:
        "data/assemblies/platanus/assemble/{sample}_contig.fa"
    output:
        "reports/BUSCO/{sample}/platanus_ass/short_summary.specific.nematoda_odb10.platanus_ass.txt"
    params:
        pfx="platanus_ass",
        db="../BUSCO/nematoda_odb10",
        mode="genome",
        dest="reports/BUSCO/{sample}"
    shell:
        "busco \
        -i {input} \
        -o {params.pfx} \
        -l {params.db} \
        -m {params.mode} -f \
        -c 14 \
        && mv \
        {params.pfx}/ \
        {params.dest}"

rule quast:
    conda:
        "../envs/quast.yaml"
    input:
        fwd = expand("data/trimmed/{sample}.{large}.trimmed_1P.fq.gz", sample=config["sample"], large=config["large"]),
        rev = expand("data/trimmed/{sample}.{large}.trimmed_2P.fq.gz", sample=config["sample"], large=config["large"]),
        plat_ass = "data/assemblies/platanus/assemble/{sample}_contig.fa",
        plat_gc = "data/assemblies/platanus/gapclosed/{sample}_gapClosed.fa",
        spades = "data/assemblies/spades/{sample}/scaffolds.fasta",
        platass_redun = "data/assemblies/redundans/{sample}/platanus/scaffolds.filled.fa",
        platgc_redun = "data/assemblies/redundans/{sample}/platanusgc/scaffolds.filled.fa",
        spades_redun = "data/assemblies/redundans/{sample}/spades/scaffolds.filled.fa",
    output:
        "reports/quast/{sample}/report.tsv"
    params:
        out = "reports/quast/{sample}/"
    shell:
        "quast \
        --eukaryote \
        -l 'platanus assemble, platanus gapclosed, spades, platanus assemble redundans, platanus gapclosed redundans, spades redundans' \
        --conserved-genes-finding \
        --pe1 {input.fwd} \
        --pe2 {input.rev} \
        --gene-finding \
        -o {params.out} \
        -t 10 \
        {input.plat_ass} \
        {input.plat_gc} \
        {input.spades} \
        {input.platass_redun} \
        {input.platgc_redun} \
        {input.spades_redun}"
